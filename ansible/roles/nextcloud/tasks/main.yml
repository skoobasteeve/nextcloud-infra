---
- name: Install Podman
  ansible.builtin.dnf:
    name: podman
    state: present

- name: Create install directories
  become: true
  become_user: "{{ user }}"
  ansible.builtin.file:
    name: "{{ item }}"
    state: directory
    mode: "0750"
  loop:
    - "{{ podman_dir }}/nextcloud"
    - "{{ podman_dir }}/nextcloud/nextcloud-config"
    - "{{ podman_dir }}/nextcloud/mariadb"
    - "{{ podman_dir }}/nextcloud/mysql_backups"
    - "{{ podman_dir }}/nextcloud/caddy"
    - "{{ podman_dir }}/nextcloud/caddy/caddy-data"
    - "{{ systemd_dir }}"
  notify:
    - Grant permissions to mysql_backups directory to container user
    - Grant permissions to mariadb directory to container user

- name: Create nextcloud data mount point
  ansible.builtin.file:
    name: /mnt/nextcloud-data
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0750"

- name: Create filesystem in data volume
  community.general.filesystem:
    fstype: ext4
    dev: /dev/sdb

- name: Mount data volume
  ansible.posix.mount:
    path: /mnt/nextcloud-data
    src: /dev/sdb
    fstype: ext4
    state: mounted

- name: Get stats of the Nextcloud data directory
  ansible.builtin.stat:
    path: /mnt/nextcloud-data/data
  register: ncdata

- name: Get stats of the mysql_backups directory
  ansible.builtin.stat:
    path: "{{ podman_dir }}/nextcloud/mysql_backups"
  register: backupdir

- name: Create data directory
  ansible.builtin.file:
    name: /mnt/nextcloud-data/data
    recurse: true
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0750"
  register: create_ncdata
  changed_when: create_ncdata.owner == user
  when: not ncdata.stat.exists or (ncdata.stat.uid != 100032 or ncdata.stat.gid != 100032)
  notify:
    - Grant permissions to nextcloud data directory to container user
    - Restart Nextcloud services

- name: Allow unprivileged access to port 80
  ansible.posix.sysctl:
    name: net.ipv4.ip_unprivileged_port_start
    value: '80'
    state: present

- name: Permit traffic in default zone for http(s)
  ansible.posix.firewalld:
    service: "{{ item }}"
    permanent: true
    state: enabled
  loop:
    - http
    - https
  notify: Restart firewalld service

- name: Permit traffic on alternate SSH port
  ansible.posix.firewalld:
    port: "{{ alt_ssh_port }}"
    permanent: true
    state: enabled
  notify: Restart firewalld service

- name: Copy systemd unit files
  ansible.builtin.copy:
    src: files/systemd/
    dest: "{{ systemd_dir }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0640"
  notify: Restart Nextcloud services

- name: Copy caddyfile template
  ansible.builtin.template:
    src: templates/Caddyfile.j2
    dest: "{{ podman_dir }}/nextcloud/caddy/Caddyfile"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0750"
  notify: Restart Nextcloud services

- name: Copy nextcloud env template
  ansible.builtin.template:
    src: templates/.nextcloud_env.j2
    dest: "/home/{{ user }}/.nextcloud_env"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0750"
  notify: Restart Nextcloud services

- name: Create a cron file for Nextcloud maintenance
  ansible.builtin.cron:
    name: nextcloud
    minute: "*/5"
    user: "{{ user }}"
    job: "podman exec -u 33 nextcloud-app php /var/www/html/cron.php"
    cron_file: nextcloud

- name: Create a cron file for Nextcloud preview generation
  ansible.builtin.cron:
    name: nextcloud preview-generator
    minute: "0"
    hour: "6"
    user: "{{ user }}"
    job: "podman exec -u 33 nextcloud-app php occ preview:pre-generate"
    cron_file: nextcloud

- name: Check if user is lingering
  ansible.builtin.stat:
    path: "/var/lib/systemd/linger/{{ user }}"
  register: user_lingering
  when: user != "root"
  changed_when: not user_lingering.stat.exists
  notify: Enable lingering

- name: Reload systemd
  become: true
  become_user: "{{ user }}"
  ansible.builtin.systemd:
    scope: user
    daemon_reload: true
  notify: Restart Nextcloud services

- name: Start Nextcloud services
  become: true
  become_user: "{{ user }}"
  ansible.builtin.systemd:
    name: "pod-nextcloud-pod.service"
    scope: user
    enabled: true
    state: started
  register: ncstart
  changed_when: ncstart.status.ActiveState == "inactive"
  environment:
    XDG_RUNTIME_DIR: /run/user/{{ ansible_user_uid }}

- name: Wait for Nextcloud to start and create its directories
  ansible.builtin.wait_for:
    path: "{{ podman_dir }}/nextcloud/nextcloud-config/config/config.sample.php"
    sleep: 3

- name: Copy Nextcloud config.php files
  ansible.builtin.copy:
    src: files/config/
    dest: "{{ podman_dir }}/nextcloud/nextcloud-config/config"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0644"
  notify:
    - Grant permissions to nextcloud config files to container user
    - Restart Nextcloud services
